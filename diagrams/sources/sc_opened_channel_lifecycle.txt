[TokenNetwork channel open and deposit |
  [<start>start]->[<choice>P1, P2; want to open a ;Channel]
  [<choice>P1, P2; want to open a ;Channel]->1[<state>P1 opens Channel]
  [<choice>P1, P2; want to open a ;Channel]->2[<state>P2 opens Channel]
  [<choice>P1, P2; want to open a ;Channel]->3[<state>Delegate opens Channel]
  [<state>P1 opens Channel]->[<state>P1-P2 Channel is open]
  [<state>P2 opens Channel]->[<state>P1-P2 Channel is open]
  [<state>Delegate opens Channel]->[<state>P1-P2 Channel is open]
  [<state>P1-P2 Channel is open]->[<choice>Deposit tokens]
  [<choice>Deposit tokens]->1[<state>P1 deposit]
  [<choice>Deposit tokens]->3[<state>Delegate deposits]
  [<choice>Deposit tokens]->2[<state>P2 deposit]

  [<state>P1 deposit]->[<state>Off-chain transfers P1->P2 enabled]
  [<state>P2 deposit]->[<state>Off-chain transfers P2->P1 enabled]
  [<state>Delegate deposits]->[<choice>where?]
  [<choice>where?]->1[<state>P1 deposit]
  [<choice>where?]->2[<state>P2 deposit]
  [<state>Off-chain transfers P1->P2 enabled]->[<state>Channel alive]
  [<state>Off-chain transfers P2->P1 enabled]->[<state>Channel alive]
  [<state>Channel alive]->[<state>P1 withdraws ; if P1 deposit; enough]
  [<state>P1 withdraws ; if P1 deposit; enough]->[<state>Channel alive]
  [<state>Channel alive]->[<state>P2 withdraws ; if P2 deposit; enough]
  [<state>P2 withdraws ; if P2 deposit; enough]->[<state>Channel alive]

]
